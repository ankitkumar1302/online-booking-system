# BookItNow - Cursor Rules
# This file defines code styling and linting rules for the BookItNow application

# TypeScript rules
[*.{ts,tsx}]
indent_style = space
indent_size = 2
end_of_line = lf
charset = utf-8
trim_trailing_whitespace = true
insert_final_newline = true
max_line_length = 100

# React component structure
# Ensure components follow the same structure:
# 1. Imports
# 2. Types/Interfaces
# 3. Component function
# 4. Export

# Naming conventions
# Components: PascalCase
# Hooks: camelCase with 'use' prefix
# Context: PascalCase with 'Context' suffix
# Files: PascalCase for components, camelCase for utils/hooks

# Import ordering
# 1. React and Next.js imports
# 2. Third-party libraries
# 3. Custom components
# 4. Hooks
# 5. Utils
# 6. Types
# 7. Assets/styles

# Component organization
# Keep components small and focused
# Extract repeated logic to custom hooks
# Use composition over inheritance
# Follow atomic design principles

# Styling rules
# Use TailwindCSS utility classes
# Group related Tailwind classes together
# For complex components, extract styles to separate components
# Follow color palette defined in tailwind.config.ts

# State management
# Use React Context for global state
# Use useState for component-level state
# Use useReducer for complex state logic
# Avoid prop drilling by using context or component composition

# Error handling
# Use try/catch blocks for async operations
# Handle error states gracefully with fallback UI
# Log errors to console in development

# Performance optimization
# Use React.memo for expensive renders
# Use useMemo and useCallback appropriately
# Virtualize long lists
# Optimize images with Next.js Image component

# Accessibility
# Use semantic HTML elements
# Include ARIA attributes where necessary
# Ensure keyboard navigation works
# Maintain proper contrast ratios

# Security
# Sanitize user inputs
# Validate data on both client and server
# Use HTTPS for all API calls
# Don't store sensitive data in localStorage

# Testing conventions
# Write tests for critical components
# Use descriptive test names
# Follow AAA (Arrange-Act-Assert) pattern
# Test both success and error states

# Documentation
# Add JSDoc comments for functions and components
# Document props with TypeScript interfaces
# Include examples for complex components
# Document state management and side effects 